name: Build and Release

on: [push, pull_request, workflow_dispatch]

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: cd src && go mod download

      - name: Run linting
        run: |
          cd src
          go fmt ./...
          go vet ./...

      - name: Run unit tests
        run: make test-verbose

      - name: Run tests with coverage
        run: make test-coverage

      - name: Run benchmarks
        run: make bench

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: dist/coverage/
          retention-days: 30

      - name: Upload test results
        if: always()
        run: |
          echo "Test suite completed"
          echo "Coverage files:"
          ls -la dist/coverage/ || echo "No coverage files found"

  build:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: test
    if: ${{ github.ref_type == 'tag' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install zip utility
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Build all platforms and create packages
        run: |
          echo "Building with auto-detected version from git tag: ${{ github.ref_name }}"
          make release

      - name: Clean up build directories (keep only packages)
        run: |
          echo "=== Before cleanup ==="
          ls -la dist/
          echo ""
          # Remove build directories, keep only zip packages
          find dist/ -maxdepth 1 -type d -name "proxy-protocol-*" -exec rm -rf {} \;
          echo "=== After cleanup ==="
          ls -la dist/

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: dist/*.zip
          retention-days: 7

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: ${{ success() && github.ref_type == 'tag' }}
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: release-assets

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: coverage-report

      - name: List release assets
        run: |
          echo "=== Release Assets ==="
          ls -la release-assets/
          echo ""
          echo "=== Coverage Report ==="
          ls -la coverage-report/ || echo "No coverage report found"

      - name: Generate release notes
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          COVERAGE_PERCENTAGE=""
          if [ -f coverage-report/coverage.out ]; then
            COVERAGE_PERCENTAGE=$(go tool cover -func=coverage-report/coverage.out | grep "total:" | awk '{print $3}')
          fi

          cat > release-notes.txt << EOF
          # Zoraxy Proxy Protocol Plugin v${VERSION}

          ## 📦 Plugin Packages (Ready for Zoraxy Installation)

          Download the appropriate package for your platform and install it in Zoraxy using the plugin manager.

          ### Available Platforms:
          - **Linux AMD64** - \`proxy-protocol-${VERSION}-linux-amd64.zip\`
          - **Linux ARM64** - \`proxy-protocol-${VERSION}-linux-arm64.zip\`
          - **Windows AMD64** - \`proxy-protocol-${VERSION}-windows-amd64.zip\`
          - **macOS AMD64** - \`proxy-protocol-${VERSION}-darwin-amd64.zip\`
          - **macOS ARM64** - \`proxy-protocol-${VERSION}-darwin-arm64.zip\`
          - **FreeBSD AMD64** - \`proxy-protocol-${VERSION}-freebsd-amd64.zip\`

          ## 🔧 Features
          - Proxy Protocol v1 and v2 support
          - Real client IP preservation
          - Seamless integration with Zoraxy
          - Cross-platform compatibility
          - IPv4 and IPv6 support
          - Comprehensive error handling

          ## 🧪 Quality Assurance
          - **Test Coverage**: ${COVERAGE_PERCENTAGE:-"N/A"}
          - **Automated Testing**: Full test suite with unit tests, integration tests, and benchmarks
          - **Cross-Platform Builds**: Validated on multiple operating systems
          - **RFC Compliance**: Follows Proxy Protocol v1 and v2 specifications

          ## 🏗 Build Information
          - **Go Version:** ${{ env.GO_VERSION }}
          - **Built on:** Ubuntu Linux with cross-compilation
          - **Build System:** Make-based automation with auto-version detection
          - **Quality Gate:** All tests must pass before release

          ## 📋 Installation Instructions
          1. Download the \`.zip\` package for your platform
          2. Open Zoraxy web interface
          3. Navigate to Plugin Manager
          4. Upload and install the downloaded package
          5. Enable the Proxy Protocol plugin
          6. Configure your load balancer to send Proxy Protocol headers
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          body_path: release-notes.txt
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify_failure:
    name: Notify Build Failure
    runs-on: ubuntu-latest
    needs: [test, build, release]
    if: ${{ always() && github.ref_type == 'tag' && (needs.test.result == 'failure' || needs.build.result == 'failure' || needs.release.result == 'failure') }}
    steps:
      - name: Send failure notification
        run: |
          echo "🚨 Release failed for ${{ github.repository }} - ${{ github.ref_name }}"
          echo "Test result: ${{ needs.test.result }}"
          echo "Build result: ${{ needs.build.result }}"
          echo "Release result: ${{ needs.release.result }}"
