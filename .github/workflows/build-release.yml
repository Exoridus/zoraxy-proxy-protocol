name: Build and Release

on: [push, pull_request, workflow_dispatch]

env:
  GO_VERSION: '1.20'  # Match your go.mod version

jobs:
  test:
    name: Run Tests and Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run tests (if any exist)
        run: |
          if go list ./... | grep -q .; then
            go test -v ./... || echo "No tests found or tests failed"
          else
            echo "No test files found - skipping tests"
          fi

  build:
    name: Build Multi-Platform Binaries
    runs-on: ubuntu-latest
    needs: test
    if: ${{ success() && github.ref_type == 'tag' }}
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            name: proxy-protocol-linux-amd64
          - goos: linux
            goarch: arm64
            name: proxy-protocol-linux-arm64
          - goos: windows
            goarch: amd64
            name: proxy-protocol-windows-amd64.exe
          - goos: darwin
            goarch: amd64
            name: proxy-protocol-darwin-amd64
          - goos: darwin
            goarch: arm64
            name: proxy-protocol-darwin-arm64
          - goos: freebsd
            goarch: amd64
            name: proxy-protocol-freebsd-amd64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog generation

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          go build -ldflags="-s -w -X main.version=${{ github.ref_name }}" -o dist/${{ matrix.name }} .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: dist/${{ matrix.name }}
          retention-days: 7

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: ${{ success() && github.ref_type == 'tag' }}
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for changelog generation

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f -name "proxy-protocol-*" -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Generate checksums
        run: |
          cd release-assets
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Generate release notes
        id: generate_notes
        run: |
          chmod +x .github/scripts/generate-release-notes.sh
          ./.github/scripts/generate-release-notes.sh "${{ github.ref_name }}" "${{ github.repository }}" "${{ env.GO_VERSION }}"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            release-assets/*
          body_path: release-notes.txt
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify_release_failure:
    name: Notify Release Failure
    runs-on: ubuntu-latest
    needs: [test, build, release]
    if: ${{ always() && github.ref_type == 'tag' && (needs.build.result == 'failure' || needs.release.result == 'failure') }}
    steps:
      - name: Send failure notification
        run: |
          echo "ðŸš¨ Release failed for ${{ github.repository }} - ${{ github.ref_name }}"
          echo "Build result: ${{ needs.build.result }}"
          echo "Release result: ${{ needs.release.result }}"
