name: Build and Release

on: [push, pull_request, workflow_dispatch]

env:
  GO_VERSION: '1.21'

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'tag' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install zip utility
        run: sudo apt-get update && sudo apt-get install -y zip

      - name: Build all platforms and create packages
        run: |
          echo "Building with auto-detected version from git tag: ${{ github.ref_name }}"
          make release

      - name: Clean up build directories (keep only packages)
        run: |
          echo "=== Before cleanup ==="
          ls -la dist/
          echo ""
          # Remove build directories, keep only zip packages
          find dist/ -maxdepth 1 -type d -name "proxy-protocol-*" -exec rm -rf {} \;
          echo "=== After cleanup ==="
          ls -la dist/

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: dist/*.zip
          retention-days: 7

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: ${{ success() && github.ref_type == 'tag' }}
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: packages
          path: release-assets

      - name: List release assets
        run: |
          echo "=== Release Assets ==="
          ls -la release-assets/

      - name: Generate release notes
        run: |
          VERSION="${{ github.ref_name }}"
          VERSION="${VERSION#v}"
          cat > release-notes.txt << EOF
          # Zoraxy Proxy Protocol Plugin v${VERSION}

          ## 📦 Plugin Packages (Ready for Zoraxy Installation)

          Download the appropriate package for your platform and install it in Zoraxy using the plugin manager.

          ### Available Platforms:
          - **Linux AMD64** - \`proxy-protocol-${VERSION}-linux-amd64.zip\`
          - **Linux ARM64** - \`proxy-protocol-${VERSION}-linux-arm64.zip\`
          - **Windows AMD64** - \`proxy-protocol-${VERSION}-windows-amd64.zip\`
          - **macOS AMD64** - \`proxy-protocol-${VERSION}-darwin-amd64.zip\`
          - **macOS ARM64** - \`proxy-protocol-${VERSION}-darwin-arm64.zip\`
          - **FreeBSD AMD64** - \`proxy-protocol-${VERSION}-freebsd-amd64.zip\`

          ## 🔧 Features
          - Proxy Protocol v1 and v2 support
          - Real client IP preservation
          - Seamless integration with Zoraxy
          - Cross-platform compatibility

          ## 🏗 Build Information
          - **Go Version:** ${{ env.GO_VERSION }}
          - **Built on:** Ubuntu Linux with cross-compilation
          - **Build System:** Make-based automation with auto-version detection

          ## 📋 Installation Instructions
          1. Download the \`.zip\` package for your platform
          2. Open Zoraxy web interface
          3. Navigate to Plugin Manager
          4. Upload and install the downloaded package
          5. Enable the Proxy Protocol plugin
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-assets/*
          body_path: release-notes.txt
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify_failure:
    name: Notify Build Failure
    runs-on: ubuntu-latest
    needs: [build, release]
    if: ${{ always() && github.ref_type == 'tag' && (needs.build.result == 'failure' || needs.release.result == 'failure') }}
    steps:
      - name: Send failure notification
        run: |
          echo "🚨 Release failed for ${{ github.repository }} - ${{ github.ref_name }}"
          echo "Build result: ${{ needs.build.result }}"
          echo "Release result: ${{ needs.release.result }}"
